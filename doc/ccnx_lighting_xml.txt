# Step 1: 
# Gumstix broadcast an Interest packet asks for a name
# Configuration Manager returns back a Data packet with the name 

# Interest Packet XML
<?xml version="1.0"?>
<Interest>
  <Name>
    <Component ccnbencoding="text"> <!-- Broadcast its serial number--> </Component>
  </Name>
  <!-- We don't need MinSuffixComponents and MaxSuffixComponents here-->
  <PublisherPublicKeyDigest>%C1.M.K%00<key id value></PublisherPublicKeyDigest>
  <!-- SHA-256 digest of the public key of the publisher, implement to generate the digest --> 
  <!-- We don't need Exclude here -->
  <ChildSelector>0</ChildSelector> <!-- if more than one ContentObject within a given content store is matched, choose the leftmost child. -->
  <Scope>0</Scope> <!-- here 0 means preventing Interest propagation beyond the local ccnd -->
  <InterestLifetime>0x5000</InterestLifetime> <!-- set the InterestLifetime as 5 seconds, if not answered, send the interest packet again -->
  <Nonce>%C1.N%00EiOGo5FSFN0zw4vl</Nonce> <!-- need to generate Nonce online, here is an example -->
</Interest>

# Data packet XML
<?xml version="1.0"?>
<ContentObject>
  <Signature>
    <DigestAlgorithm>2.16.840.1.101.3.4.2.1</DigestAlgorithm> <!-- decimal DigestAlgorithm OID -->
    <Witness ccnbencoding="base64Binary"> <!-- need to implement using a Merkle Hash Tree --> </Witness> 
    <!-- Witness is additional information to verify the signature, it is represented as a DER-encoded PKCS#1 DigestInfo, which contains an AlgorithmIdentifier and a byte array containing the digest information to be interpreted according to that OID. -->
    <SignatureBits ccnbencoding="base64Binary"> <!-- Signature itself --> <SignatureBits>
    <!-- SignatureBits need to be implemented using the Signature generation algorithm described in CCNx Protocol. -->
  </Signature>
  <Name>
    <Component ccnbencoding="text"><!-- Serial number of the client who sends out the Interest packet> --></Component>
  </Name>
  <SignedInfo>
    <PublisherPublicKeyDigest> <!-- same as the PublisherPublicKeyDigest in the Interest message -->
    </PublisherPublicKeyDigest>
    <Timestamp> <!-- need to implement Timestamp -->
    </Timestamp>
  <SignedInfo>
  <Content ccnbencoding="text">UCLA/Boelter/Floor_3/Room_3551/LEDCtrler_1/LED_2/R253G234B100</Content> <!-- is this name format correct? Can we use "/" here? I will look up the protocol. --> 
</ContentObject>


# Step 2:
# Client sends out an Interest packet to control the lights
# Light Controller (Server) receives the packet and responds with a Data packet
# Light Controller Namespace: ccnx:/UCLA/Boelter/Floor_3/Room_3551/LEDCtrler_1/LED_2/R253G234B100
# Client Namespace: ccnx:/PARC/Client/10920 (? what would be a reasonable example for the client namespace?)

# Interest packet XML
<?xml version="1.0"?>
<Interest>
  <Name>
    <Component ccnbencoding="text">UCLA</Component>
    <Component cnnbencoding="text">Boelter</Component>
    <Component ccnbencoding="text">Floor3</Component>
    <Component cnnbencoding="text">Room3551</Component>
    <Component ccnbencoding="text">LEDCtrler1</Component>
    <Component cnnbencoding="text">LED2</Component>
    <Component ccnbencoding="text">R253G234B100</Component>
  </Name>
  <MinSuffixComponents>4</MinsuffixComponents> <!-- in this case, we want the namespace at least till Room3551 -->
  <PublisherPublicKeyDigest>%C1.M.K%00<key id value></PublisherPublicKeyDigest>
  <!-- SHA-256 digest of the public key of the publisher, implement to generate the digest --> 
  <Exclude>
    <Bloom> </Bloom> <!-- We could implement to enumerate the elements of the exclusion set. simply LED[0], LED[1], LED[2]â€¦? -->
  </Exclude>
  <ChildSelector>0</ChildSelector> <!-- if more than one ContentObject within a given content store is matched, choose the leftmost child. -->
  <Scope>0</Scope> <!-- here 0 means preventing Interest propagation beyond the local ccnd -->
  <InterestLifetime>0x5000</InterestLifetime> <!-- set the InterestLifetime as 3 seconds -->
  <Nonce>%C1.N%00EiOGo5FSFN0zw4vl</Nonce> <!-- need to generate Nonce every time? -->
</Interest>


# Data packet XML
<ContentObject>
  <Signature>
    <DigestAlgorithm>2.16.840.1.101.3.4.2.1</DigestAlgorithm> <!-- decimal DigestAlgorithm OID -->
    <Witness ccnbencoding="base64Binary"> <!-- need to implement using a Merkle Hash Tree --> </Witness> 
    <!-- Witness is additional information to verify the signature, it is represented as a DER-encoded PKCS#1 DigestInfo, which contains an AlgorithmIdentifier and a byte array containing the digest information to be interpreted according to that OID. -->
    <SignatureBits ccnbencoding="base64Binary"> <!-- Signature itself --> <SignatureBits>
    <!-- SignatureBits need to be implemented using the Signature generation algorithm described in CCNx Protocol. -->
  </Signature>
  <Name>
    <Component ccnbencoding="text">PARC</Component>
    <Component cnnbencoding="text">Client</Component>
    <Component ccnbencoding="text">10920</Component>
  </Name>
  <SignedInfo>
    <PublisherPublicKeyDigest> <!-- same as the PublisherPublicKeyDigest in the Interest message -->
    </PublisherPublicKeyDigest>
    <Timestamp> <!-- need to implement Timestamp -->
    </Timestamp>
  <SignedInfo>
  <Content ccnbencoding="text">Interest received and lights controlled acknowledgement</Content>
</ContentObject>
